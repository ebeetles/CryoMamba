name: CryoMamba Desktop Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'napari_cryomamba/**'
      - '.github/workflows/desktop-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'napari_cryomamba/**'
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  PYTHON_VERSION: '3.9'
  MACOS_VERSION: '12'

jobs:
  build-macos:
    runs-on: macos-12
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('napari_cryomamba/build-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install build dependencies
      run: |
        cd napari_cryomamba
        pip install --upgrade pip
        pip install -r build-requirements.txt
    
    - name: Validate dependencies
      run: |
        cd napari_cryomamba
        python validate_deps.py
    
    - name: Build CryoMamba app
      run: |
        cd napari_cryomamba
        python build.py --clean
    
    - name: Validate build
      run: |
        cd napari_cryomamba
        python build.py --validate-only
    
    - name: Test app launch
      run: |
        cd napari_cryomamba
        # Test that the app can start (timeout after 10 seconds)
        timeout 10s open dist/CryoMamba.app || true
    
    - name: Code sign (if certificates available)
      if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'prod')
      env:
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        cd napari_cryomamba
        
        # Create keychain and import certificate
        if [ -n "$CERTIFICATE_P12" ]; then
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import <(echo "$CERTIFICATE_P12" | base64 --decode) -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # Sign the app
          python sign.py --app-path dist/CryoMamba.app
        else
          echo "No certificate available, skipping code signing"
        fi
    
    - name: Create DMG installer
      if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'prod')
      run: |
        cd napari_cryomamba
        python build.py --skip-deps --create-dmg
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cryomamba-macos-${{ github.sha }}
        path: |
          napari_cryomamba/dist/CryoMamba.app
          napari_cryomamba/dist/CryoMamba.dmg
        retention-days: 30
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          napari_cryomamba/dist/CryoMamba.app.zip
          napari_cryomamba/dist/CryoMamba.dmg
        draft: false
        prerelease: false

  test-build:
    runs-on: macos-12
    needs: build-macos
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: cryomamba-macos-${{ github.sha }}
        path: test-artifacts
    
    - name: Test app functionality
      run: |
        # Basic smoke test - check app structure
        if [ -d "test-artifacts/CryoMamba.app" ]; then
          echo "✓ App bundle exists"
          
          # Check executable exists
          if [ -f "test-artifacts/CryoMamba.app/Contents/MacOS/CryoMamba" ]; then
            echo "✓ Executable exists"
          else
            echo "✗ Executable not found"
            exit 1
          fi
          
          # Check Info.plist exists
          if [ -f "test-artifacts/CryoMamba.app/Contents/Info.plist" ]; then
            echo "✓ Info.plist exists"
          else
            echo "✗ Info.plist not found"
            exit 1
          fi
          
          echo "✓ Basic app structure validation passed"
        else
          echo "✗ App bundle not found"
          exit 1
        fi
    
    - name: Test app launch (headless)
      run: |
        # Test app can start without GUI
        export DISPLAY=:99
        timeout 5s open test-artifacts/CryoMamba.app || true
        echo "✓ App launch test completed"

  notify:
    runs-on: ubuntu-latest
    needs: [build-macos, test-build]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-macos.result }}" == "success" ]; then
          echo "✓ CryoMamba desktop build completed successfully!"
        else
          echo "✗ CryoMamba desktop build failed!"
          exit 1
        fi
